// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spu.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SPUStatus int32

const (
	SPUStatus_default SPUStatus = 0
	SPUStatus_offline SPUStatus = 1
	SPUStatus_online  SPUStatus = 2
	SPUStatus_delete  SPUStatus = 9
)

var SPUStatus_name = map[int32]string{
	0: "default",
	1: "offline",
	2: "online",
	9: "delete",
}
var SPUStatus_value = map[string]int32{
	"default": 0,
	"offline": 1,
	"online":  2,
	"delete":  9,
}

func (x SPUStatus) String() string {
	return proto.EnumName(SPUStatus_name, int32(x))
}
func (SPUStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// SPU信息
type SPUInformation struct {
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,1,opt,name=shopId" json:"shopId,omitempty"`
	// SPU ID
	SpuId uint64 `protobuf:"varint,2,opt,name=spuId" json:"spuId,omitempty"`
	// 分类 ID
	CategoryId uint64 `protobuf:"varint,3,opt,name=categoryId" json:"categoryId,omitempty"`
	// 标题
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// 价格（单位：分）
	Price uint64 `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	// 单位
	Unit string `protobuf:"bytes,6,opt,name=unit" json:"unit,omitempty"`
	// 商品图片
	Images []string `protobuf:"bytes,7,rep,name=images" json:"images,omitempty"`
	// 详情内容（富文本）
	DetailText string `protobuf:"bytes,8,opt,name=detailText" json:"detailText,omitempty"`
	// 初始库存
	Stock uint64 `protobuf:"varint,9,opt,name=stock" json:"stock,omitempty"`
	// 是否支持7日无条件退货
	Support7DayReturnGoods bool `protobuf:"varint,10,opt,name=support7DayReturnGoods" json:"support7DayReturnGoods,omitempty"`
	// 条形码
	Barcode string `protobuf:"bytes,11,opt,name=barcode" json:"barcode,omitempty"`
	// 是否上架
	IsOnline bool `protobuf:"varint,12,opt,name=isOnline" json:"isOnline,omitempty"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,13,opt,name=createTime" json:"createTime,omitempty"`
	// 更新时间
	UpdateTime int64 `protobuf:"varint,14,opt,name=updateTime" json:"updateTime,omitempty"`
	// SKU 列表
	SkuList []*SKUInformationStruct `protobuf:"bytes,15,rep,name=skuList" json:"skuList,omitempty"`
	// 会员价
	VipPrice uint64 `protobuf:"varint,16,opt,name=vipPrice" json:"vipPrice,omitempty"`
	// 积分价
	Point uint64 `protobuf:"varint,17,opt,name=point" json:"point,omitempty"`
	// 成本价
	SettlePrice uint64 `protobuf:"varint,18,opt,name=settlePrice" json:"settlePrice,omitempty"`
	// 成本价
	CostPrice uint64 `protobuf:"varint,19,opt,name=costPrice" json:"costPrice,omitempty"`
	// 是否热门
	IsHot bool `protobuf:"varint,20,opt,name=isHot" json:"isHot,omitempty"`
	// 排序
	Sort uint32 `protobuf:"varint,21,opt,name=sort" json:"sort,omitempty"`
}

func (m *SPUInformation) Reset()                    { *m = SPUInformation{} }
func (m *SPUInformation) String() string            { return proto.CompactTextString(m) }
func (*SPUInformation) ProtoMessage()               {}
func (*SPUInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *SPUInformation) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *SPUInformation) GetSpuId() uint64 {
	if m != nil {
		return m.SpuId
	}
	return 0
}

func (m *SPUInformation) GetCategoryId() uint64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *SPUInformation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SPUInformation) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SPUInformation) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *SPUInformation) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *SPUInformation) GetDetailText() string {
	if m != nil {
		return m.DetailText
	}
	return ""
}

func (m *SPUInformation) GetStock() uint64 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *SPUInformation) GetSupport7DayReturnGoods() bool {
	if m != nil {
		return m.Support7DayReturnGoods
	}
	return false
}

func (m *SPUInformation) GetBarcode() string {
	if m != nil {
		return m.Barcode
	}
	return ""
}

func (m *SPUInformation) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *SPUInformation) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *SPUInformation) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *SPUInformation) GetSkuList() []*SKUInformationStruct {
	if m != nil {
		return m.SkuList
	}
	return nil
}

func (m *SPUInformation) GetVipPrice() uint64 {
	if m != nil {
		return m.VipPrice
	}
	return 0
}

func (m *SPUInformation) GetPoint() uint64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *SPUInformation) GetSettlePrice() uint64 {
	if m != nil {
		return m.SettlePrice
	}
	return 0
}

func (m *SPUInformation) GetCostPrice() uint64 {
	if m != nil {
		return m.CostPrice
	}
	return 0
}

func (m *SPUInformation) GetIsHot() bool {
	if m != nil {
		return m.IsHot
	}
	return false
}

func (m *SPUInformation) GetSort() uint32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

type SKUInformationStruct struct {
	// SKU ID
	SkuId uint64 `protobuf:"varint,1,opt,name=skuId" json:"skuId,omitempty"`
	// 原价，单位：分
	OriginalPrice uint64 `protobuf:"varint,2,opt,name=originalPrice" json:"originalPrice,omitempty"`
	// 现价，单位：分
	Price uint64 `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	// 当前库存（SKU库存）
	Stock uint64 `protobuf:"varint,4,opt,name=stock" json:"stock,omitempty"`
	// 会员价
	VipPrice uint64 `protobuf:"varint,5,opt,name=vipPrice" json:"vipPrice,omitempty"`
	// 积分价
	Point uint64 `protobuf:"varint,6,opt,name=point" json:"point,omitempty"`
	// SKU NAME
	Name string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
}

func (m *SKUInformationStruct) Reset()                    { *m = SKUInformationStruct{} }
func (m *SKUInformationStruct) String() string            { return proto.CompactTextString(m) }
func (*SKUInformationStruct) ProtoMessage()               {}
func (*SKUInformationStruct) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *SKUInformationStruct) GetSkuId() uint64 {
	if m != nil {
		return m.SkuId
	}
	return 0
}

func (m *SKUInformationStruct) GetOriginalPrice() uint64 {
	if m != nil {
		return m.OriginalPrice
	}
	return 0
}

func (m *SKUInformationStruct) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SKUInformationStruct) GetStock() uint64 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *SKUInformationStruct) GetVipPrice() uint64 {
	if m != nil {
		return m.VipPrice
	}
	return 0
}

func (m *SKUInformationStruct) GetPoint() uint64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *SKUInformationStruct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SKUInformation struct {
	// SKU ID
	SkuId uint64 `protobuf:"varint,1,opt,name=skuId" json:"skuId,omitempty"`
	// SPU ID
	SpuId uint64 `protobuf:"varint,2,opt,name=spuId" json:"spuId,omitempty"`
	// 原价，单位：分
	OriginalPrice uint64 `protobuf:"varint,3,opt,name=originalPrice" json:"originalPrice,omitempty"`
	// 现价，单位：分
	Price uint64 `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	// 当前库存（SKU库存）
	Stock uint64 `protobuf:"varint,5,opt,name=stock" json:"stock,omitempty"`
	// SPU
	Spu *SPUInformation `protobuf:"bytes,6,opt,name=spu" json:"spu,omitempty"`
	// SKU 名称
	Name string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	// 会员价
	VipPrice uint64 `protobuf:"varint,8,opt,name=vipPrice" json:"vipPrice,omitempty"`
	// 积分价
	Point uint64 `protobuf:"varint,9,opt,name=point" json:"point,omitempty"`
}

func (m *SKUInformation) Reset()                    { *m = SKUInformation{} }
func (m *SKUInformation) String() string            { return proto.CompactTextString(m) }
func (*SKUInformation) ProtoMessage()               {}
func (*SKUInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *SKUInformation) GetSkuId() uint64 {
	if m != nil {
		return m.SkuId
	}
	return 0
}

func (m *SKUInformation) GetSpuId() uint64 {
	if m != nil {
		return m.SpuId
	}
	return 0
}

func (m *SKUInformation) GetOriginalPrice() uint64 {
	if m != nil {
		return m.OriginalPrice
	}
	return 0
}

func (m *SKUInformation) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SKUInformation) GetStock() uint64 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *SKUInformation) GetSpu() *SPUInformation {
	if m != nil {
		return m.Spu
	}
	return nil
}

func (m *SKUInformation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SKUInformation) GetVipPrice() uint64 {
	if m != nil {
		return m.VipPrice
	}
	return 0
}

func (m *SKUInformation) GetPoint() uint64 {
	if m != nil {
		return m.Point
	}
	return 0
}

type GetSpuRequest struct {
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,1,opt,name=shopId" json:"shopId,omitempty"`
	// SPU ID
	SpuId uint64 `protobuf:"varint,2,opt,name=spuId" json:"spuId,omitempty"`
}

func (m *GetSpuRequest) Reset()                    { *m = GetSpuRequest{} }
func (m *GetSpuRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSpuRequest) ProtoMessage()               {}
func (*GetSpuRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *GetSpuRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *GetSpuRequest) GetSpuId() uint64 {
	if m != nil {
		return m.SpuId
	}
	return 0
}

type GetSpuReply struct {
	// 商品信息
	Spu *SPUInformation `protobuf:"bytes,1,opt,name=spu" json:"spu,omitempty"`
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *GetSpuReply) Reset()                    { *m = GetSpuReply{} }
func (m *GetSpuReply) String() string            { return proto.CompactTextString(m) }
func (*GetSpuReply) ProtoMessage()               {}
func (*GetSpuReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *GetSpuReply) GetSpu() *SPUInformation {
	if m != nil {
		return m.Spu
	}
	return nil
}

func (m *GetSpuReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetSpusRequest struct {
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,1,opt,name=shopId" json:"shopId,omitempty"`
	// SPU ID
	SpuIds []uint64 `protobuf:"varint,2,rep,packed,name=spuIds" json:"spuIds,omitempty"`
}

func (m *GetSpusRequest) Reset()                    { *m = GetSpusRequest{} }
func (m *GetSpusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSpusRequest) ProtoMessage()               {}
func (*GetSpusRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *GetSpusRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *GetSpusRequest) GetSpuIds() []uint64 {
	if m != nil {
		return m.SpuIds
	}
	return nil
}

type GetSpusReply struct {
	// 商品信息
	Spus map[uint64]*SPUInformation `protobuf:"bytes,1,rep,name=spus" json:"spus,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *GetSpusReply) Reset()                    { *m = GetSpusReply{} }
func (m *GetSpusReply) String() string            { return proto.CompactTextString(m) }
func (*GetSpusReply) ProtoMessage()               {}
func (*GetSpusReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *GetSpusReply) GetSpus() map[uint64]*SPUInformation {
	if m != nil {
		return m.Spus
	}
	return nil
}

func (m *GetSpusReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetSPUListRequest struct {
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,1,opt,name=shopId" json:"shopId,omitempty"`
	// SPU 名称搜索（模糊搜索）
	NameFuzzySearch string `protobuf:"bytes,2,opt,name=nameFuzzySearch" json:"nameFuzzySearch,omitempty"`
	// 页码
	Page uint64 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
	// 分页大小
	PageSize uint64 `protobuf:"varint,4,opt,name=pageSize" json:"pageSize,omitempty"`
	// 状态
	Status []uint32 `protobuf:"varint,5,rep,packed,name=status" json:"status,omitempty"`
	// 最后一条 Id
	LastSpuId uint64 `protobuf:"varint,6,opt,name=lastSpuId" json:"lastSpuId,omitempty"`
	// 是否热门
	IsHot bool `protobuf:"varint,7,opt,name=isHot" json:"isHot,omitempty"`
}

func (m *GetSPUListRequest) Reset()                    { *m = GetSPUListRequest{} }
func (m *GetSPUListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSPUListRequest) ProtoMessage()               {}
func (*GetSPUListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *GetSPUListRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *GetSPUListRequest) GetNameFuzzySearch() string {
	if m != nil {
		return m.NameFuzzySearch
	}
	return ""
}

func (m *GetSPUListRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetSPUListRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetSPUListRequest) GetStatus() []uint32 {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetSPUListRequest) GetLastSpuId() uint64 {
	if m != nil {
		return m.LastSpuId
	}
	return 0
}

func (m *GetSPUListRequest) GetIsHot() bool {
	if m != nil {
		return m.IsHot
	}
	return false
}

type GetSPUListReply struct {
	// 商品信息
	Spus []*SPUInformation `protobuf:"bytes,1,rep,name=Spus" json:"Spus,omitempty"`
	// 总记录数
	Count uint64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *GetSPUListReply) Reset()                    { *m = GetSPUListReply{} }
func (m *GetSPUListReply) String() string            { return proto.CompactTextString(m) }
func (*GetSPUListReply) ProtoMessage()               {}
func (*GetSPUListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *GetSPUListReply) GetSpus() []*SPUInformation {
	if m != nil {
		return m.Spus
	}
	return nil
}

func (m *GetSPUListReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetSPUListReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetHotSPUListRequest struct {
	ShopId uint64 `protobuf:"varint,1,opt,name=shopId" json:"shopId,omitempty"`
}

func (m *GetHotSPUListRequest) Reset()                    { *m = GetHotSPUListRequest{} }
func (m *GetHotSPUListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHotSPUListRequest) ProtoMessage()               {}
func (*GetHotSPUListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *GetHotSPUListRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

type GetHotSPUListReply struct {
	Err *Error `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	// 商品信息
	Spus []*SPUInformation `protobuf:"bytes,2,rep,name=Spus" json:"Spus,omitempty"`
}

func (m *GetHotSPUListReply) Reset()                    { *m = GetHotSPUListReply{} }
func (m *GetHotSPUListReply) String() string            { return proto.CompactTextString(m) }
func (*GetHotSPUListReply) ProtoMessage()               {}
func (*GetHotSPUListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *GetHotSPUListReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetHotSPUListReply) GetSpus() []*SPUInformation {
	if m != nil {
		return m.Spus
	}
	return nil
}

type GetSkuRequest struct {
	// SKU ID
	SkuId uint64 `protobuf:"varint,1,opt,name=skuId" json:"skuId,omitempty"`
}

func (m *GetSkuRequest) Reset()                    { *m = GetSkuRequest{} }
func (m *GetSkuRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSkuRequest) ProtoMessage()               {}
func (*GetSkuRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *GetSkuRequest) GetSkuId() uint64 {
	if m != nil {
		return m.SkuId
	}
	return 0
}

type GetSkuReply struct {
	// SKU 信息
	Sku *SKUInformation `protobuf:"bytes,1,opt,name=sku" json:"sku,omitempty"`
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *GetSkuReply) Reset()                    { *m = GetSkuReply{} }
func (m *GetSkuReply) String() string            { return proto.CompactTextString(m) }
func (*GetSkuReply) ProtoMessage()               {}
func (*GetSkuReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *GetSkuReply) GetSku() *SKUInformation {
	if m != nil {
		return m.Sku
	}
	return nil
}

func (m *GetSkuReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetSkusRequest struct {
	// SKU IDs
	SkuIds []uint64 `protobuf:"varint,1,rep,packed,name=skuIds" json:"skuIds,omitempty"`
}

func (m *GetSkusRequest) Reset()                    { *m = GetSkusRequest{} }
func (m *GetSkusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSkusRequest) ProtoMessage()               {}
func (*GetSkusRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *GetSkusRequest) GetSkuIds() []uint64 {
	if m != nil {
		return m.SkuIds
	}
	return nil
}

type GetSkusReply struct {
	// SKU 信息
	Skus map[uint64]*SKUInformation `protobuf:"bytes,1,rep,name=skus" json:"skus,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *GetSkusReply) Reset()                    { *m = GetSkusReply{} }
func (m *GetSkusReply) String() string            { return proto.CompactTextString(m) }
func (*GetSkusReply) ProtoMessage()               {}
func (*GetSkusReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *GetSkusReply) GetSkus() map[uint64]*SKUInformation {
	if m != nil {
		return m.Skus
	}
	return nil
}

func (m *GetSkusReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetSkuStockRequest struct {
	// SKU ID
	SkuId uint64 `protobuf:"varint,1,opt,name=skuId" json:"skuId,omitempty"`
}

func (m *GetSkuStockRequest) Reset()                    { *m = GetSkuStockRequest{} }
func (m *GetSkuStockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSkuStockRequest) ProtoMessage()               {}
func (*GetSkuStockRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *GetSkuStockRequest) GetSkuId() uint64 {
	if m != nil {
		return m.SkuId
	}
	return 0
}

type GetSkuStockReply struct {
	// 当前库存
	Stock uint64 `protobuf:"varint,1,opt,name=stock" json:"stock,omitempty"`
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *GetSkuStockReply) Reset()                    { *m = GetSkuStockReply{} }
func (m *GetSkuStockReply) String() string            { return proto.CompactTextString(m) }
func (*GetSkuStockReply) ProtoMessage()               {}
func (*GetSkuStockReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *GetSkuStockReply) GetStock() uint64 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *GetSkuStockReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type DecrementSkuStockRequest struct {
	// SKU ID
	SkuId uint64 `protobuf:"varint,1,opt,name=skuId" json:"skuId,omitempty"`
	// 扣减件数
	Count uint64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *DecrementSkuStockRequest) Reset()                    { *m = DecrementSkuStockRequest{} }
func (m *DecrementSkuStockRequest) String() string            { return proto.CompactTextString(m) }
func (*DecrementSkuStockRequest) ProtoMessage()               {}
func (*DecrementSkuStockRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *DecrementSkuStockRequest) GetSkuId() uint64 {
	if m != nil {
		return m.SkuId
	}
	return 0
}

func (m *DecrementSkuStockRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DecrementSkuStockReply struct {
	// 扣减后件数
	Stock uint64 `protobuf:"varint,1,opt,name=stock" json:"stock,omitempty"`
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *DecrementSkuStockReply) Reset()                    { *m = DecrementSkuStockReply{} }
func (m *DecrementSkuStockReply) String() string            { return proto.CompactTextString(m) }
func (*DecrementSkuStockReply) ProtoMessage()               {}
func (*DecrementSkuStockReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *DecrementSkuStockReply) GetStock() uint64 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *DecrementSkuStockReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type RestoreSkuStockRequest struct {
	// SKU ID
	SkuId uint64 `protobuf:"varint,1,opt,name=skuId" json:"skuId,omitempty"`
	// 还原件数
	Count uint64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *RestoreSkuStockRequest) Reset()                    { *m = RestoreSkuStockRequest{} }
func (m *RestoreSkuStockRequest) String() string            { return proto.CompactTextString(m) }
func (*RestoreSkuStockRequest) ProtoMessage()               {}
func (*RestoreSkuStockRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *RestoreSkuStockRequest) GetSkuId() uint64 {
	if m != nil {
		return m.SkuId
	}
	return 0
}

func (m *RestoreSkuStockRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type RestoreSkuStockReply struct {
	// 还原后件数
	Stock uint64 `protobuf:"varint,1,opt,name=stock" json:"stock,omitempty"`
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *RestoreSkuStockReply) Reset()                    { *m = RestoreSkuStockReply{} }
func (m *RestoreSkuStockReply) String() string            { return proto.CompactTextString(m) }
func (*RestoreSkuStockReply) ProtoMessage()               {}
func (*RestoreSkuStockReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *RestoreSkuStockReply) GetStock() uint64 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *RestoreSkuStockReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type CreateSPURequest struct {
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,1,opt,name=shopId" json:"shopId,omitempty"`
	// 分类 ID
	CategoryId uint64 `protobuf:"varint,2,opt,name=categoryId" json:"categoryId,omitempty"`
	// 商品名
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// 价格（单位：分）
	Price uint64 `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	// 单位
	Unit string `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
	// 商品图片
	Images []string `protobuf:"bytes,6,rep,name=images" json:"images,omitempty"`
	// 详情内容（富文本）
	DetailText string `protobuf:"bytes,7,opt,name=detailText" json:"detailText,omitempty"`
	// 初始库存
	Stock uint64 `protobuf:"varint,8,opt,name=stock" json:"stock,omitempty"`
	// 是否支持7日无条件退货
	Support7DayReturnGoods bool `protobuf:"varint,9,opt,name=support7DayReturnGoods" json:"support7DayReturnGoods,omitempty"`
	// 条形码
	Barcode string `protobuf:"bytes,10,opt,name=barcode" json:"barcode,omitempty"`
	// 创建人
	CreatedBy uint64 `protobuf:"varint,11,opt,name=createdBy" json:"createdBy,omitempty"`
	// 会员价
	VipPrice uint64 `protobuf:"varint,12,opt,name=vipPrice" json:"vipPrice,omitempty"`
	// 积分价
	Point uint64 `protobuf:"varint,13,opt,name=point" json:"point,omitempty"`
	// 结算价
	SettlePrice uint64 `protobuf:"varint,14,opt,name=settlePrice" json:"settlePrice,omitempty"`
	// 成本价
	CostPrice uint64 `protobuf:"varint,15,opt,name=costPrice" json:"costPrice,omitempty"`
	// 是否热门
	IsHot bool `protobuf:"varint,16,opt,name=isHot" json:"isHot,omitempty"`
	// 排序
	Sort uint32 `protobuf:"varint,17,opt,name=sort" json:"sort,omitempty"`
}

func (m *CreateSPURequest) Reset()                    { *m = CreateSPURequest{} }
func (m *CreateSPURequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSPURequest) ProtoMessage()               {}
func (*CreateSPURequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *CreateSPURequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *CreateSPURequest) GetCategoryId() uint64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *CreateSPURequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateSPURequest) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CreateSPURequest) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *CreateSPURequest) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *CreateSPURequest) GetDetailText() string {
	if m != nil {
		return m.DetailText
	}
	return ""
}

func (m *CreateSPURequest) GetStock() uint64 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *CreateSPURequest) GetSupport7DayReturnGoods() bool {
	if m != nil {
		return m.Support7DayReturnGoods
	}
	return false
}

func (m *CreateSPURequest) GetBarcode() string {
	if m != nil {
		return m.Barcode
	}
	return ""
}

func (m *CreateSPURequest) GetCreatedBy() uint64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *CreateSPURequest) GetVipPrice() uint64 {
	if m != nil {
		return m.VipPrice
	}
	return 0
}

func (m *CreateSPURequest) GetPoint() uint64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *CreateSPURequest) GetSettlePrice() uint64 {
	if m != nil {
		return m.SettlePrice
	}
	return 0
}

func (m *CreateSPURequest) GetCostPrice() uint64 {
	if m != nil {
		return m.CostPrice
	}
	return 0
}

func (m *CreateSPURequest) GetIsHot() bool {
	if m != nil {
		return m.IsHot
	}
	return false
}

func (m *CreateSPURequest) GetSort() uint32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

type CreateSPUReply struct {
	// 商品信息
	Spu *SPUInformation `protobuf:"bytes,1,opt,name=spu" json:"spu,omitempty"`
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *CreateSPUReply) Reset()                    { *m = CreateSPUReply{} }
func (m *CreateSPUReply) String() string            { return proto.CompactTextString(m) }
func (*CreateSPUReply) ProtoMessage()               {}
func (*CreateSPUReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *CreateSPUReply) GetSpu() *SPUInformation {
	if m != nil {
		return m.Spu
	}
	return nil
}

func (m *CreateSPUReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type UpdateSPURequest struct {
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,1,opt,name=shopId" json:"shopId,omitempty"`
	// 商品 ID
	SpuId uint64 `protobuf:"varint,2,opt,name=spuId" json:"spuId,omitempty"`
	// 商品名
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// 价格（单位：分）
	Price uint64 `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	// 单位
	Unit string `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
	// 商品图片
	Images []string `protobuf:"bytes,6,rep,name=images" json:"images,omitempty"`
	// 详情内容（富文本）
	DetailText string `protobuf:"bytes,7,opt,name=detailText" json:"detailText,omitempty"`
	// 是否支持7日无条件退货
	Support7DayReturnGoods bool `protobuf:"varint,8,opt,name=support7DayReturnGoods" json:"support7DayReturnGoods,omitempty"`
	// 条形码
	Barcode string `protobuf:"bytes,9,opt,name=barcode" json:"barcode,omitempty"`
	// 更新人
	UpdatedBy uint64 `protobuf:"varint,10,opt,name=updatedBy" json:"updatedBy,omitempty"`
	// 分类 Id
	CategoryId uint64 `protobuf:"varint,11,opt,name=categoryId" json:"categoryId,omitempty"`
	// 会员价
	VipPrice uint64 `protobuf:"varint,12,opt,name=vipPrice" json:"vipPrice,omitempty"`
	// 积分价
	Point uint64 `protobuf:"varint,13,opt,name=point" json:"point,omitempty"`
	// 结算价
	SettlePrice uint64 `protobuf:"varint,14,opt,name=settlePrice" json:"settlePrice,omitempty"`
	// 成本价
	CostPrice uint64 `protobuf:"varint,15,opt,name=costPrice" json:"costPrice,omitempty"`
	// 是否热门
	IsHot bool `protobuf:"varint,16,opt,name=isHot" json:"isHot,omitempty"`
	// 排序
	Sort uint32 `protobuf:"varint,17,opt,name=sort" json:"sort,omitempty"`
}

func (m *UpdateSPURequest) Reset()                    { *m = UpdateSPURequest{} }
func (m *UpdateSPURequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSPURequest) ProtoMessage()               {}
func (*UpdateSPURequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *UpdateSPURequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *UpdateSPURequest) GetSpuId() uint64 {
	if m != nil {
		return m.SpuId
	}
	return 0
}

func (m *UpdateSPURequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateSPURequest) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *UpdateSPURequest) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *UpdateSPURequest) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *UpdateSPURequest) GetDetailText() string {
	if m != nil {
		return m.DetailText
	}
	return ""
}

func (m *UpdateSPURequest) GetSupport7DayReturnGoods() bool {
	if m != nil {
		return m.Support7DayReturnGoods
	}
	return false
}

func (m *UpdateSPURequest) GetBarcode() string {
	if m != nil {
		return m.Barcode
	}
	return ""
}

func (m *UpdateSPURequest) GetUpdatedBy() uint64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

func (m *UpdateSPURequest) GetCategoryId() uint64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *UpdateSPURequest) GetVipPrice() uint64 {
	if m != nil {
		return m.VipPrice
	}
	return 0
}

func (m *UpdateSPURequest) GetPoint() uint64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *UpdateSPURequest) GetSettlePrice() uint64 {
	if m != nil {
		return m.SettlePrice
	}
	return 0
}

func (m *UpdateSPURequest) GetCostPrice() uint64 {
	if m != nil {
		return m.CostPrice
	}
	return 0
}

func (m *UpdateSPURequest) GetIsHot() bool {
	if m != nil {
		return m.IsHot
	}
	return false
}

func (m *UpdateSPURequest) GetSort() uint32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

type UpdateSPUReply struct {
	// 商品信息
	Spu *SPUInformation `protobuf:"bytes,1,opt,name=spu" json:"spu,omitempty"`
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *UpdateSPUReply) Reset()                    { *m = UpdateSPUReply{} }
func (m *UpdateSPUReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateSPUReply) ProtoMessage()               {}
func (*UpdateSPUReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

func (m *UpdateSPUReply) GetSpu() *SPUInformation {
	if m != nil {
		return m.Spu
	}
	return nil
}

func (m *UpdateSPUReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type UpdateStockRequest struct {
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,1,opt,name=shopId" json:"shopId,omitempty"`
	// 商品 ID
	SpuId uint64 `protobuf:"varint,2,opt,name=spuId" json:"spuId,omitempty"`
	// 初始库存
	Stock uint64 `protobuf:"varint,3,opt,name=stock" json:"stock,omitempty"`
}

func (m *UpdateStockRequest) Reset()                    { *m = UpdateStockRequest{} }
func (m *UpdateStockRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateStockRequest) ProtoMessage()               {}
func (*UpdateStockRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

func (m *UpdateStockRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *UpdateStockRequest) GetSpuId() uint64 {
	if m != nil {
		return m.SpuId
	}
	return 0
}

func (m *UpdateStockRequest) GetStock() uint64 {
	if m != nil {
		return m.Stock
	}
	return 0
}

type UpdateStockReply struct {
	// 变更后件数
	Stock uint64 `protobuf:"varint,1,opt,name=stock" json:"stock,omitempty"`
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *UpdateStockReply) Reset()                    { *m = UpdateStockReply{} }
func (m *UpdateStockReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateStockReply) ProtoMessage()               {}
func (*UpdateStockReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

func (m *UpdateStockReply) GetStock() uint64 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *UpdateStockReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type UpdateStatusRequest struct {
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,1,opt,name=shopId" json:"shopId,omitempty"`
	// 商品 ID
	SpuId uint64 `protobuf:"varint,2,opt,name=spuId" json:"spuId,omitempty"`
	// 状态（1 => 下架；2 => 上架； 9 => 删除）
	Status uint64 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *UpdateStatusRequest) Reset()                    { *m = UpdateStatusRequest{} }
func (m *UpdateStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateStatusRequest) ProtoMessage()               {}
func (*UpdateStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{27} }

func (m *UpdateStatusRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *UpdateStatusRequest) GetSpuId() uint64 {
	if m != nil {
		return m.SpuId
	}
	return 0
}

func (m *UpdateStatusRequest) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type UpdateStatusReply struct {
	// 错误信息（没有错误时为nil）
	Err *Error `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
}

func (m *UpdateStatusReply) Reset()                    { *m = UpdateStatusReply{} }
func (m *UpdateStatusReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateStatusReply) ProtoMessage()               {}
func (*UpdateStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{28} }

func (m *UpdateStatusReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func init() {
	proto.RegisterType((*SPUInformation)(nil), "goods.pkg.rpc.protos.SPUInformation")
	proto.RegisterType((*SKUInformationStruct)(nil), "goods.pkg.rpc.protos.SKUInformationStruct")
	proto.RegisterType((*SKUInformation)(nil), "goods.pkg.rpc.protos.SKUInformation")
	proto.RegisterType((*GetSpuRequest)(nil), "goods.pkg.rpc.protos.GetSpuRequest")
	proto.RegisterType((*GetSpuReply)(nil), "goods.pkg.rpc.protos.GetSpuReply")
	proto.RegisterType((*GetSpusRequest)(nil), "goods.pkg.rpc.protos.GetSpusRequest")
	proto.RegisterType((*GetSpusReply)(nil), "goods.pkg.rpc.protos.GetSpusReply")
	proto.RegisterType((*GetSPUListRequest)(nil), "goods.pkg.rpc.protos.GetSPUListRequest")
	proto.RegisterType((*GetSPUListReply)(nil), "goods.pkg.rpc.protos.GetSPUListReply")
	proto.RegisterType((*GetHotSPUListRequest)(nil), "goods.pkg.rpc.protos.GetHotSPUListRequest")
	proto.RegisterType((*GetHotSPUListReply)(nil), "goods.pkg.rpc.protos.GetHotSPUListReply")
	proto.RegisterType((*GetSkuRequest)(nil), "goods.pkg.rpc.protos.GetSkuRequest")
	proto.RegisterType((*GetSkuReply)(nil), "goods.pkg.rpc.protos.GetSkuReply")
	proto.RegisterType((*GetSkusRequest)(nil), "goods.pkg.rpc.protos.GetSkusRequest")
	proto.RegisterType((*GetSkusReply)(nil), "goods.pkg.rpc.protos.GetSkusReply")
	proto.RegisterType((*GetSkuStockRequest)(nil), "goods.pkg.rpc.protos.GetSkuStockRequest")
	proto.RegisterType((*GetSkuStockReply)(nil), "goods.pkg.rpc.protos.GetSkuStockReply")
	proto.RegisterType((*DecrementSkuStockRequest)(nil), "goods.pkg.rpc.protos.DecrementSkuStockRequest")
	proto.RegisterType((*DecrementSkuStockReply)(nil), "goods.pkg.rpc.protos.DecrementSkuStockReply")
	proto.RegisterType((*RestoreSkuStockRequest)(nil), "goods.pkg.rpc.protos.RestoreSkuStockRequest")
	proto.RegisterType((*RestoreSkuStockReply)(nil), "goods.pkg.rpc.protos.RestoreSkuStockReply")
	proto.RegisterType((*CreateSPURequest)(nil), "goods.pkg.rpc.protos.CreateSPURequest")
	proto.RegisterType((*CreateSPUReply)(nil), "goods.pkg.rpc.protos.CreateSPUReply")
	proto.RegisterType((*UpdateSPURequest)(nil), "goods.pkg.rpc.protos.UpdateSPURequest")
	proto.RegisterType((*UpdateSPUReply)(nil), "goods.pkg.rpc.protos.UpdateSPUReply")
	proto.RegisterType((*UpdateStockRequest)(nil), "goods.pkg.rpc.protos.UpdateStockRequest")
	proto.RegisterType((*UpdateStockReply)(nil), "goods.pkg.rpc.protos.UpdateStockReply")
	proto.RegisterType((*UpdateStatusRequest)(nil), "goods.pkg.rpc.protos.UpdateStatusRequest")
	proto.RegisterType((*UpdateStatusReply)(nil), "goods.pkg.rpc.protos.UpdateStatusReply")
	proto.RegisterEnum("goods.pkg.rpc.protos.SPUStatus", SPUStatus_name, SPUStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SPU service

type SPUClient interface {
	// 获取SPU信息
	GetSpu(ctx context.Context, in *GetSpuRequest, opts ...grpc.CallOption) (*GetSpuReply, error)
	// 批量获取SPU信息
	GetSpus(ctx context.Context, in *GetSpusRequest, opts ...grpc.CallOption) (*GetSpusReply, error)
	// 获取 SPU 列表信息
	GetSPUList(ctx context.Context, in *GetSPUListRequest, opts ...grpc.CallOption) (*GetSPUListReply, error)
	// 获取热门 SPU 列表信息
	GetHotSPUList(ctx context.Context, in *GetHotSPUListRequest, opts ...grpc.CallOption) (*GetHotSPUListReply, error)
	// 获取SKU信息
	GetSku(ctx context.Context, in *GetSkuRequest, opts ...grpc.CallOption) (*GetSkuReply, error)
	// 批量获取SKU信息
	GetSkus(ctx context.Context, in *GetSkusRequest, opts ...grpc.CallOption) (*GetSkusReply, error)
	// 获取SKU库存
	GetSkuStock(ctx context.Context, in *GetSkuStockRequest, opts ...grpc.CallOption) (*GetSkuStockReply, error)
	// 扣减SKU库存
	DecrementSkuStock(ctx context.Context, in *DecrementSkuStockRequest, opts ...grpc.CallOption) (*DecrementSkuStockReply, error)
	// 还原SKU库存
	RestoreSkuStock(ctx context.Context, in *RestoreSkuStockRequest, opts ...grpc.CallOption) (*RestoreSkuStockReply, error)
	// 创建 SPU
	CreateSPU(ctx context.Context, in *CreateSPURequest, opts ...grpc.CallOption) (*CreateSPUReply, error)
	// 更新 SPU
	UpdateSPU(ctx context.Context, in *UpdateSPURequest, opts ...grpc.CallOption) (*UpdateSPUReply, error)
	// 更新 SPU 库存
	UpdateStock(ctx context.Context, in *UpdateStockRequest, opts ...grpc.CallOption) (*UpdateStockReply, error)
	// 更新 SPU 状态
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusReply, error)
}

type sPUClient struct {
	cc *grpc.ClientConn
}

func NewSPUClient(cc *grpc.ClientConn) SPUClient {
	return &sPUClient{cc}
}

func (c *sPUClient) GetSpu(ctx context.Context, in *GetSpuRequest, opts ...grpc.CallOption) (*GetSpuReply, error) {
	out := new(GetSpuReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/GetSpu", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) GetSpus(ctx context.Context, in *GetSpusRequest, opts ...grpc.CallOption) (*GetSpusReply, error) {
	out := new(GetSpusReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/GetSpus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) GetSPUList(ctx context.Context, in *GetSPUListRequest, opts ...grpc.CallOption) (*GetSPUListReply, error) {
	out := new(GetSPUListReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/GetSPUList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) GetHotSPUList(ctx context.Context, in *GetHotSPUListRequest, opts ...grpc.CallOption) (*GetHotSPUListReply, error) {
	out := new(GetHotSPUListReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/GetHotSPUList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) GetSku(ctx context.Context, in *GetSkuRequest, opts ...grpc.CallOption) (*GetSkuReply, error) {
	out := new(GetSkuReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/GetSku", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) GetSkus(ctx context.Context, in *GetSkusRequest, opts ...grpc.CallOption) (*GetSkusReply, error) {
	out := new(GetSkusReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/GetSkus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) GetSkuStock(ctx context.Context, in *GetSkuStockRequest, opts ...grpc.CallOption) (*GetSkuStockReply, error) {
	out := new(GetSkuStockReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/GetSkuStock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) DecrementSkuStock(ctx context.Context, in *DecrementSkuStockRequest, opts ...grpc.CallOption) (*DecrementSkuStockReply, error) {
	out := new(DecrementSkuStockReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/DecrementSkuStock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) RestoreSkuStock(ctx context.Context, in *RestoreSkuStockRequest, opts ...grpc.CallOption) (*RestoreSkuStockReply, error) {
	out := new(RestoreSkuStockReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/RestoreSkuStock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) CreateSPU(ctx context.Context, in *CreateSPURequest, opts ...grpc.CallOption) (*CreateSPUReply, error) {
	out := new(CreateSPUReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/CreateSPU", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) UpdateSPU(ctx context.Context, in *UpdateSPURequest, opts ...grpc.CallOption) (*UpdateSPUReply, error) {
	out := new(UpdateSPUReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/UpdateSPU", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) UpdateStock(ctx context.Context, in *UpdateStockRequest, opts ...grpc.CallOption) (*UpdateStockReply, error) {
	out := new(UpdateStockReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/UpdateStock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sPUClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusReply, error) {
	out := new(UpdateStatusReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.SPU/UpdateStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SPU service

type SPUServer interface {
	// 获取SPU信息
	GetSpu(context.Context, *GetSpuRequest) (*GetSpuReply, error)
	// 批量获取SPU信息
	GetSpus(context.Context, *GetSpusRequest) (*GetSpusReply, error)
	// 获取 SPU 列表信息
	GetSPUList(context.Context, *GetSPUListRequest) (*GetSPUListReply, error)
	// 获取热门 SPU 列表信息
	GetHotSPUList(context.Context, *GetHotSPUListRequest) (*GetHotSPUListReply, error)
	// 获取SKU信息
	GetSku(context.Context, *GetSkuRequest) (*GetSkuReply, error)
	// 批量获取SKU信息
	GetSkus(context.Context, *GetSkusRequest) (*GetSkusReply, error)
	// 获取SKU库存
	GetSkuStock(context.Context, *GetSkuStockRequest) (*GetSkuStockReply, error)
	// 扣减SKU库存
	DecrementSkuStock(context.Context, *DecrementSkuStockRequest) (*DecrementSkuStockReply, error)
	// 还原SKU库存
	RestoreSkuStock(context.Context, *RestoreSkuStockRequest) (*RestoreSkuStockReply, error)
	// 创建 SPU
	CreateSPU(context.Context, *CreateSPURequest) (*CreateSPUReply, error)
	// 更新 SPU
	UpdateSPU(context.Context, *UpdateSPURequest) (*UpdateSPUReply, error)
	// 更新 SPU 库存
	UpdateStock(context.Context, *UpdateStockRequest) (*UpdateStockReply, error)
	// 更新 SPU 状态
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusReply, error)
}

func RegisterSPUServer(s *grpc.Server, srv SPUServer) {
	s.RegisterService(&_SPU_serviceDesc, srv)
}

func _SPU_GetSpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).GetSpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/GetSpu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).GetSpu(ctx, req.(*GetSpuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_GetSpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).GetSpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/GetSpus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).GetSpus(ctx, req.(*GetSpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_GetSPUList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSPUListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).GetSPUList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/GetSPUList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).GetSPUList(ctx, req.(*GetSPUListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_GetHotSPUList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotSPUListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).GetHotSPUList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/GetHotSPUList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).GetHotSPUList(ctx, req.(*GetHotSPUListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_GetSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).GetSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/GetSku",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).GetSku(ctx, req.(*GetSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_GetSkus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).GetSkus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/GetSkus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).GetSkus(ctx, req.(*GetSkusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_GetSkuStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkuStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).GetSkuStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/GetSkuStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).GetSkuStock(ctx, req.(*GetSkuStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_DecrementSkuStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrementSkuStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).DecrementSkuStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/DecrementSkuStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).DecrementSkuStock(ctx, req.(*DecrementSkuStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_RestoreSkuStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreSkuStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).RestoreSkuStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/RestoreSkuStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).RestoreSkuStock(ctx, req.(*RestoreSkuStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_CreateSPU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSPURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).CreateSPU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/CreateSPU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).CreateSPU(ctx, req.(*CreateSPURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_UpdateSPU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSPURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).UpdateSPU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/UpdateSPU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).UpdateSPU(ctx, req.(*UpdateSPURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_UpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).UpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/UpdateStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).UpdateStock(ctx, req.(*UpdateStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SPU_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPUServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.SPU/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPUServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SPU_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goods.pkg.rpc.protos.SPU",
	HandlerType: (*SPUServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpu",
			Handler:    _SPU_GetSpu_Handler,
		},
		{
			MethodName: "GetSpus",
			Handler:    _SPU_GetSpus_Handler,
		},
		{
			MethodName: "GetSPUList",
			Handler:    _SPU_GetSPUList_Handler,
		},
		{
			MethodName: "GetHotSPUList",
			Handler:    _SPU_GetHotSPUList_Handler,
		},
		{
			MethodName: "GetSku",
			Handler:    _SPU_GetSku_Handler,
		},
		{
			MethodName: "GetSkus",
			Handler:    _SPU_GetSkus_Handler,
		},
		{
			MethodName: "GetSkuStock",
			Handler:    _SPU_GetSkuStock_Handler,
		},
		{
			MethodName: "DecrementSkuStock",
			Handler:    _SPU_DecrementSkuStock_Handler,
		},
		{
			MethodName: "RestoreSkuStock",
			Handler:    _SPU_RestoreSkuStock_Handler,
		},
		{
			MethodName: "CreateSPU",
			Handler:    _SPU_CreateSPU_Handler,
		},
		{
			MethodName: "UpdateSPU",
			Handler:    _SPU_UpdateSPU_Handler,
		},
		{
			MethodName: "UpdateStock",
			Handler:    _SPU_UpdateStock_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _SPU_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spu.proto",
}

func init() { proto.RegisterFile("spu.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0xe3, 0xfc, 0xf9, 0x64, 0x7f, 0xb2, 0xd3, 0x65, 0x65, 0x05, 0x84, 0x82, 0xd9, 0xb6,
	0x61, 0x55, 0x72, 0xb1, 0x48, 0x50, 0x55, 0xaa, 0x54, 0x95, 0xed, 0xcf, 0xaa, 0x48, 0xac, 0x9c,
	0x46, 0x20, 0xaa, 0x82, 0xdc, 0x64, 0x36, 0xb5, 0x26, 0xb1, 0x8d, 0x67, 0x5c, 0x48, 0x25, 0xde,
	0x80, 0x0b, 0x1e, 0x8a, 0x17, 0xe0, 0x05, 0xb8, 0xe0, 0x01, 0x78, 0x00, 0xae, 0xd0, 0xcc, 0xd8,
	0xce, 0x38, 0xb1, 0x13, 0xa7, 0xad, 0x0a, 0x57, 0xf1, 0x39, 0x33, 0xe7, 0x67, 0xce, 0x7c, 0xe7,
	0xf8, 0x73, 0xc0, 0xa0, 0x41, 0xd4, 0x0f, 0x42, 0x9f, 0xf9, 0xe8, 0x70, 0xe2, 0xfb, 0x63, 0xda,
	0x0f, 0xc8, 0xa4, 0x1f, 0x06, 0x23, 0xa9, 0xa4, 0x1d, 0x24, 0xb4, 0x3f, 0x8c, 0xfc, 0xd9, 0xcc,
	0xf7, 0xa4, 0xd2, 0xfa, 0xa7, 0x0a, 0x7b, 0x83, 0x8b, 0xe1, 0xb9, 0x77, 0xe9, 0x87, 0x33, 0x87,
	0xb9, 0xbe, 0x87, 0x8e, 0xa0, 0x4e, 0x5f, 0xf8, 0xc1, 0xf9, 0xd8, 0xd4, 0xba, 0x5a, 0xaf, 0x6a,
	0xc7, 0x12, 0x3a, 0x84, 0x1a, 0x0d, 0xa2, 0xf3, 0xb1, 0x59, 0x11, 0x6a, 0x29, 0xa0, 0x0f, 0x01,
	0x46, 0x0e, 0xc3, 0x13, 0x3f, 0x9c, 0x9f, 0x8f, 0x4d, 0x5d, 0x2c, 0x29, 0x1a, 0x84, 0xa0, 0xea,
	0x39, 0x33, 0x6c, 0x56, 0xbb, 0x5a, 0xcf, 0xb0, 0xc5, 0x33, 0xf7, 0x14, 0x84, 0xee, 0x08, 0x9b,
	0x35, 0xe9, 0x49, 0x08, 0x7c, 0x67, 0xe4, 0xb9, 0xcc, 0xac, 0xcb, 0x9d, 0xfc, 0x99, 0xe7, 0xe2,
	0xce, 0x9c, 0x09, 0xa6, 0x66, 0xa3, 0xab, 0xf7, 0x0c, 0x3b, 0x96, 0x78, 0xd4, 0x31, 0x66, 0x8e,
	0x3b, 0x7d, 0x82, 0x7f, 0x66, 0x66, 0x53, 0x58, 0x28, 0x1a, 0x91, 0x2b, 0xf3, 0x47, 0xc4, 0x34,
	0xe2, 0x5c, 0xb9, 0x80, 0x3e, 0x87, 0x23, 0x1a, 0x05, 0x81, 0x1f, 0xb2, 0x2f, 0xce, 0x9c, 0xb9,
	0x8d, 0x59, 0x14, 0x7a, 0x0f, 0x79, 0x4d, 0x4c, 0xe8, 0x6a, 0xbd, 0xa6, 0x5d, 0xb0, 0x8a, 0x4c,
	0x68, 0x3c, 0x77, 0xc2, 0x91, 0x3f, 0xc6, 0x66, 0x4b, 0x84, 0x4a, 0x44, 0xd4, 0x81, 0xa6, 0x4b,
	0xbf, 0xf6, 0xa6, 0xae, 0x87, 0xcd, 0x1d, 0xe1, 0x23, 0x95, 0x45, 0x65, 0x42, 0xec, 0x30, 0xfc,
	0xc4, 0x9d, 0x61, 0x73, 0xb7, 0xab, 0xf5, 0x74, 0x5b, 0xd1, 0xf0, 0xf5, 0x28, 0x18, 0x27, 0xeb,
	0x7b, 0x72, 0x7d, 0xa1, 0x41, 0x67, 0xd0, 0xa0, 0x24, 0xfa, 0xca, 0xa5, 0xcc, 0xdc, 0xef, 0xea,
	0xbd, 0xd6, 0xe9, 0x49, 0x3f, 0xef, 0x5a, 0xfb, 0x83, 0xc7, 0xea, 0xf5, 0x0d, 0x58, 0x18, 0x8d,
	0x98, 0x9d, 0x98, 0xf2, 0x0c, 0x5f, 0xba, 0xc1, 0x85, 0x28, 0x77, 0x5b, 0x14, 0x23, 0x95, 0xc5,
	0x3d, 0xf8, 0xae, 0xc7, 0xcc, 0x83, 0xf8, 0x1e, 0xb8, 0x80, 0xba, 0xd0, 0xa2, 0x98, 0xb1, 0x29,
	0x96, 0x46, 0x48, 0xac, 0xa9, 0x2a, 0xf4, 0x01, 0x18, 0x23, 0x9f, 0x32, 0xb9, 0x7e, 0x55, 0xac,
	0x2f, 0x14, 0xdc, 0xab, 0x4b, 0x1f, 0xf9, 0xcc, 0x3c, 0x14, 0x05, 0x91, 0x02, 0xbf, 0x5d, 0xea,
	0x87, 0xcc, 0x7c, 0xaf, 0xab, 0xf5, 0x76, 0x6d, 0xf1, 0x6c, 0xfd, 0xae, 0xc1, 0x61, 0x5e, 0xf6,
	0xe2, 0xfa, 0x48, 0x94, 0x22, 0x50, 0x0a, 0xe8, 0x18, 0x76, 0xfd, 0xd0, 0x9d, 0xb8, 0x9e, 0x33,
	0x95, 0xa1, 0x25, 0x10, 0xb3, 0xca, 0x05, 0xb8, 0x74, 0x15, 0x5c, 0x29, 0x20, 0xaa, 0x2a, 0x20,
	0xd4, 0xe2, 0xd4, 0x8a, 0x8a, 0x53, 0x57, 0x8b, 0x93, 0xc0, 0xb9, 0xb1, 0x80, 0xb3, 0xf5, 0x6b,
	0x05, 0xf6, 0xb2, 0xc7, 0x28, 0x38, 0x40, 0x7e, 0x07, 0xad, 0x1c, 0x4b, 0x5f, 0x7b, 0xac, 0x6a,
	0xee, 0xb1, 0x6a, 0x59, 0x9c, 0xeb, 0x34, 0x88, 0x44, 0xe2, 0xad, 0xd3, 0xe3, 0x02, 0xd4, 0x64,
	0x9a, 0xde, 0xe6, 0x06, 0x79, 0x87, 0xcb, 0x94, 0xa8, 0x59, 0x54, 0x22, 0x43, 0x29, 0x91, 0x75,
	0x07, 0x76, 0x1f, 0x62, 0x36, 0x08, 0x22, 0x1b, 0xff, 0x18, 0x61, 0xca, 0xb6, 0x1b, 0x28, 0x16,
	0x83, 0x56, 0x62, 0x1e, 0x4c, 0xe7, 0xc9, 0x59, 0xb4, 0x6d, 0xcf, 0xf2, 0x29, 0xe8, 0x38, 0x0c,
	0x45, 0x66, 0xad, 0xd3, 0xf7, 0xf3, 0xed, 0xee, 0x87, 0xa1, 0x1f, 0xda, 0x7c, 0x9f, 0x75, 0x17,
	0xf6, 0x64, 0x54, 0xba, 0x29, 0x6b, 0xae, 0xe7, 0x89, 0x52, 0xb3, 0xd2, 0xd5, 0x85, 0x5e, 0x48,
	0xd6, 0x9f, 0x1a, 0xec, 0xa4, 0x2e, 0x78, 0xe6, 0x77, 0xa1, 0x4a, 0x83, 0x88, 0x9a, 0x9a, 0x68,
	0xde, 0x9b, 0xf9, 0x29, 0xa8, 0x16, 0x7d, 0xfe, 0x74, 0xdf, 0x63, 0xe1, 0xdc, 0x16, 0x96, 0x5b,
	0x9e, 0xa1, 0xf3, 0x0c, 0x8c, 0xd4, 0x03, 0x6a, 0x83, 0x4e, 0xf0, 0x3c, 0xce, 0x9d, 0x3f, 0xa2,
	0xdb, 0x50, 0x7b, 0xe9, 0x4c, 0x23, 0xd9, 0x36, 0x65, 0x6b, 0x29, 0x4d, 0x6e, 0x57, 0x6e, 0x69,
	0xd6, 0x1f, 0x1a, 0x1c, 0xf0, 0x74, 0x2f, 0x86, 0x7c, 0xb0, 0x6c, 0x2a, 0x53, 0x0f, 0xf6, 0x39,
	0x7e, 0x1e, 0x44, 0xaf, 0x5e, 0xcd, 0x07, 0xd8, 0x09, 0x47, 0x2f, 0x44, 0x5c, 0xc3, 0x5e, 0x56,
	0x73, 0xd4, 0x05, 0xce, 0x24, 0x81, 0xbd, 0x78, 0xe6, 0xa8, 0xe3, 0xbf, 0x03, 0xf7, 0x55, 0x02,
	0xf8, 0x54, 0x16, 0x11, 0x99, 0xc3, 0x22, 0x6a, 0xd6, 0xba, 0x7a, 0x6f, 0xd7, 0x8e, 0x25, 0x3e,
	0x95, 0xa6, 0x0e, 0xe5, 0xe5, 0x3c, 0x1f, 0xc7, 0x4d, 0xbb, 0x50, 0x2c, 0xa6, 0x52, 0x43, 0x99,
	0x4a, 0xd6, 0x6f, 0x1a, 0xec, 0xab, 0x67, 0xe2, 0xf7, 0x76, 0x0b, 0xaa, 0x83, 0xc5, 0xbd, 0x95,
	0x2b, 0x93, 0xb0, 0xe0, 0x31, 0x46, 0x7e, 0xe4, 0xb1, 0x04, 0xd0, 0x42, 0xd8, 0x16, 0x89, 0x7d,
	0x38, 0x7c, 0x88, 0xd9, 0x23, 0xbf, 0x64, 0xa1, 0xad, 0x5f, 0x00, 0x2d, 0xed, 0xe7, 0x87, 0x88,
	0x83, 0x6a, 0xe5, 0x82, 0xa6, 0x67, 0xae, 0x6c, 0x7b, 0x66, 0xeb, 0x9a, 0xec, 0x76, 0x92, 0x76,
	0x7b, 0xee, 0xe8, 0x4b, 0xba, 0x9a, 0x28, 0x5d, 0x4d, 0x36, 0x75, 0xf5, 0xe3, 0xa5, 0xae, 0x26,
	0x5b, 0x77, 0x75, 0x4f, 0x76, 0x35, 0xc9, 0x76, 0x35, 0x11, 0xdd, 0xab, 0xc5, 0xdd, 0x4b, 0x32,
	0xdd, 0x4b, 0xd4, 0xee, 0x25, 0x65, 0xba, 0x97, 0xa4, 0xdd, 0x4b, 0x16, 0xdd, 0x4b, 0x5e, 0xaf,
	0x7b, 0xc9, 0x1b, 0x77, 0xef, 0xe3, 0xa2, 0xee, 0x3d, 0x11, 0x30, 0x19, 0x90, 0x68, 0xc0, 0x5f,
	0x11, 0xeb, 0x2f, 0xeb, 0x1b, 0x68, 0x67, 0xf6, 0xf2, 0x7a, 0xa4, 0x6f, 0x1a, 0x4d, 0x7d, 0xd3,
	0x6c, 0x79, 0x1f, 0x0f, 0xc0, 0x3c, 0xc3, 0xa3, 0x10, 0xcf, 0xb0, 0x57, 0x2e, 0x95, 0xfc, 0x96,
	0xb2, 0x9e, 0xc1, 0x51, 0x8e, 0x9f, 0xb7, 0x96, 0xe6, 0x19, 0x1c, 0xd9, 0x98, 0x32, 0x3f, 0xc4,
	0x6f, 0x92, 0xe4, 0x53, 0x38, 0x5c, 0xf1, 0xf2, 0xd6, 0x52, 0xfc, 0x4b, 0x87, 0xf6, 0x97, 0x82,
	0x4b, 0x0e, 0x2e, 0x86, 0x9b, 0x66, 0x71, 0x96, 0xa3, 0x57, 0x0a, 0x39, 0xba, 0x9e, 0xc7, 0xd1,
	0xab, 0x79, 0x1c, 0xbd, 0x96, 0xcb, 0xd1, 0xeb, 0x6b, 0x38, 0x7a, 0xa3, 0x98, 0xa3, 0x37, 0xcb,
	0x71, 0x74, 0xa3, 0x2c, 0x47, 0x87, 0x2c, 0x47, 0xe7, 0x6c, 0x55, 0x54, 0x6a, 0x7c, 0x6f, 0x2e,
	0xf8, 0x3b, 0x67, 0xab, 0x89, 0x22, 0xc3, 0x6f, 0x76, 0x8a, 0xf8, 0xcd, 0xee, 0x1a, 0x7e, 0xbc,
	0xb7, 0x81, 0x1f, 0xef, 0x17, 0xf2, 0xe3, 0x76, 0x1e, 0x3f, 0x3e, 0x50, 0xf8, 0xf1, 0x4f, 0xb0,
	0xa7, 0xdc, 0xf1, 0x3b, 0x64, 0x43, 0x1c, 0x5d, 0x43, 0xf1, 0x25, 0x52, 0x02, 0x5d, 0xf9, 0xac,
	0xf6, 0xbf, 0xc1, 0x54, 0x31, 0x7a, 0x9a, 0x65, 0xd1, 0x63, 0xac, 0xa0, 0x47, 0x7e, 0x93, 0x71,
	0xf4, 0x80, 0xbc, 0xcb, 0x54, 0xb1, 0xd4, 0x59, 0xad, 0x95, 0xce, 0xfa, 0x9f, 0xa3, 0x4b, 0xb9,
	0xe3, 0x77, 0x88, 0xae, 0x6f, 0x01, 0xc5, 0x81, 0xd5, 0xd1, 0xba, 0x1d, 0xbc, 0xd2, 0xe1, 0xa1,
	0x2b, 0xc3, 0x83, 0xbf, 0xb8, 0x32, 0x9e, 0xdf, 0xda, 0xb8, 0x7d, 0x0a, 0x57, 0x13, 0xc7, 0x9c,
	0x6b, 0xbe, 0x5e, 0xce, 0x0b, 0xe2, 0xaa, 0xc7, 0xbb, 0x85, 0x64, 0xdd, 0x83, 0x83, 0xac, 0x73,
	0x85, 0xc0, 0x95, 0x4c, 0xf0, 0xe4, 0x0e, 0x18, 0x83, 0x8b, 0xa1, 0x74, 0x80, 0x5a, 0xd0, 0x18,
	0xe3, 0x4b, 0x27, 0x9a, 0xb2, 0xf6, 0x15, 0x2e, 0xf8, 0x97, 0x97, 0x53, 0xd7, 0xc3, 0x6d, 0x0d,
	0x01, 0xd4, 0x7d, 0xf1, 0xef, 0x44, 0xbb, 0xc2, 0x9f, 0xc7, 0x78, 0x8a, 0x19, 0x6e, 0x1b, 0xa7,
	0x7f, 0x1b, 0xa0, 0x0f, 0x2e, 0x86, 0xc8, 0x86, 0xba, 0xfc, 0x22, 0x41, 0x1f, 0xaf, 0xfb, 0x5e,
	0x89, 0xcf, 0xdf, 0xf9, 0x68, 0xfd, 0xa6, 0x60, 0x3a, 0xb7, 0xae, 0xa0, 0x21, 0x34, 0xe2, 0xaf,
	0x1c, 0x74, 0xbc, 0xe1, 0x23, 0x48, 0x7a, 0xb5, 0x36, 0x7f, 0x2a, 0x59, 0x57, 0xd0, 0xf7, 0x00,
	0x0b, 0xe6, 0x8e, 0x6e, 0x14, 0xdb, 0x64, 0x68, 0x74, 0xe7, 0xda, 0xe6, 0x8d, 0xd2, 0xff, 0x44,
	0x10, 0xdb, 0x05, 0xaf, 0x46, 0x27, 0x85, 0x96, 0x2b, 0x64, 0xbd, 0xd3, 0x2b, 0xb5, 0x57, 0x06,
	0x8a, 0x6b, 0x4e, 0xd6, 0xd6, 0x9c, 0x94, 0xa9, 0x39, 0x59, 0xae, 0x39, 0x59, 0x5f, 0x73, 0x52,
	0xaa, 0xe6, 0x64, 0x51, 0x73, 0x27, 0x61, 0xf1, 0xa2, 0xbf, 0x50, 0x6f, 0x9d, 0x91, 0xda, 0xdc,
	0x9d, 0xeb, 0x25, 0x76, 0xca, 0x10, 0x14, 0x0e, 0x56, 0xa8, 0x1d, 0xea, 0xe7, 0x9b, 0x17, 0x71,
	0xc9, 0xce, 0xcd, 0xd2, 0xfb, 0x65, 0xd0, 0x19, 0xec, 0x2f, 0x51, 0x35, 0x54, 0xe0, 0x22, 0x9f,
	0x17, 0x76, 0x4e, 0x4a, 0xee, 0x96, 0xe1, 0x9e, 0x82, 0x91, 0xbe, 0xd7, 0x51, 0x41, 0x69, 0x96,
	0xc9, 0x5d, 0xe7, 0x78, 0xe3, 0xbe, 0xd4, 0x79, 0x3a, 0xd6, 0x8b, 0x9c, 0x2f, 0xbf, 0xdb, 0x8b,
	0x9c, 0x67, 0xdf, 0x0f, 0x12, 0x00, 0xca, 0x80, 0x2d, 0x02, 0xc0, 0xea, 0x74, 0xef, 0x5c, 0x2f,
	0xb1, 0x53, 0x86, 0x18, 0xc3, 0x8e, 0x3a, 0x0d, 0xd1, 0x27, 0xeb, 0x2d, 0x95, 0x71, 0xdc, 0xb9,
	0x51, 0x66, 0xab, 0x88, 0x72, 0xaf, 0xf9, 0x5d, 0x5d, 0xae, 0x3e, 0x97, 0xbf, 0x9f, 0xfd, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0xaf, 0x1f, 0x29, 0x61, 0x3f, 0x17, 0x00, 0x00,
}
