// Code generated by protoc-gen-go. DO NOT EDIT.
// source: category.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	category.proto
	goods_common.proto
	spu.proto
	state.proto

It has these top-level messages:
	CreateCategoryRequest
	CreateCategoryReply
	UpdateCategoryRequest
	UpdateCategoryReply
	GetCategoryRequest
	GetCategoryReply
	GetCategoryListRequest
	GetCategoryListReply
	DeleteCategoryRequest
	DeleteCategoryReply
	CategoryInformation
	Error
	SPUInformation
	SKUInformationStruct
	SKUInformation
	GetSpuRequest
	GetSpuReply
	GetSpusRequest
	GetSpusReply
	GetSPUListRequest
	GetSPUListReply
	GetHotSPUListRequest
	GetHotSPUListReply
	GetSkuRequest
	GetSkuReply
	GetSkusRequest
	GetSkusReply
	GetSkuStockRequest
	GetSkuStockReply
	DecrementSkuStockRequest
	DecrementSkuStockReply
	RestoreSkuStockRequest
	RestoreSkuStockReply
	CreateSPURequest
	CreateSPUReply
	UpdateSPURequest
	UpdateSPUReply
	UpdateStockRequest
	UpdateStockReply
	UpdateStatusRequest
	UpdateStatusReply
	PingRequest
	PingReply
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateCategoryRequest struct {
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,1,opt,name=shopId" json:"shopId,omitempty"`
	// 父类目ID
	ParentId uint64 `protobuf:"varint,2,opt,name=parentId" json:"parentId,omitempty"`
	// 名称
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// 描述
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// 排序
	Sort int64 `protobuf:"varint,5,opt,name=sort" json:"sort,omitempty"`
	// 创建人
	CreatedBy uint64 `protobuf:"varint,6,opt,name=createdBy" json:"createdBy,omitempty"`
}

func (m *CreateCategoryRequest) Reset()                    { *m = CreateCategoryRequest{} }
func (m *CreateCategoryRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCategoryRequest) ProtoMessage()               {}
func (*CreateCategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateCategoryRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *CreateCategoryRequest) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *CreateCategoryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateCategoryRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateCategoryRequest) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *CreateCategoryRequest) GetCreatedBy() uint64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

type CreateCategoryReply struct {
	// 分类信息
	Category *CategoryInformation `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
	// 错误信息
	Err *Error `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *CreateCategoryReply) Reset()                    { *m = CreateCategoryReply{} }
func (m *CreateCategoryReply) String() string            { return proto.CompactTextString(m) }
func (*CreateCategoryReply) ProtoMessage()               {}
func (*CreateCategoryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateCategoryReply) GetCategory() *CategoryInformation {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *CreateCategoryReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type UpdateCategoryRequest struct {
	// 分类 ID
	CategoryId uint64 `protobuf:"varint,1,opt,name=categoryId" json:"categoryId,omitempty"`
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,2,opt,name=shopId" json:"shopId,omitempty"`
	// 名称
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// 描述
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// 排序
	Sort int64 `protobuf:"varint,5,opt,name=sort" json:"sort,omitempty"`
	// 更新人
	UpdatedBy uint64 `protobuf:"varint,6,opt,name=updatedBy" json:"updatedBy,omitempty"`
}

func (m *UpdateCategoryRequest) Reset()                    { *m = UpdateCategoryRequest{} }
func (m *UpdateCategoryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateCategoryRequest) ProtoMessage()               {}
func (*UpdateCategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateCategoryRequest) GetCategoryId() uint64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *UpdateCategoryRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *UpdateCategoryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateCategoryRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateCategoryRequest) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *UpdateCategoryRequest) GetUpdatedBy() uint64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

type UpdateCategoryReply struct {
	// 分类信息
	Category *CategoryInformation `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
	// 错误信息
	Err *Error `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *UpdateCategoryReply) Reset()                    { *m = UpdateCategoryReply{} }
func (m *UpdateCategoryReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateCategoryReply) ProtoMessage()               {}
func (*UpdateCategoryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateCategoryReply) GetCategory() *CategoryInformation {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *UpdateCategoryReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetCategoryRequest struct {
	// 分类 ID
	CategoryId uint64 `protobuf:"varint,1,opt,name=categoryId" json:"categoryId,omitempty"`
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,2,opt,name=shopId" json:"shopId,omitempty"`
}

func (m *GetCategoryRequest) Reset()                    { *m = GetCategoryRequest{} }
func (m *GetCategoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCategoryRequest) ProtoMessage()               {}
func (*GetCategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetCategoryRequest) GetCategoryId() uint64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *GetCategoryRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

type GetCategoryReply struct {
	// 分类信息
	Category *CategoryInformation `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
	// 错误信息
	Err *Error `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *GetCategoryReply) Reset()                    { *m = GetCategoryReply{} }
func (m *GetCategoryReply) String() string            { return proto.CompactTextString(m) }
func (*GetCategoryReply) ProtoMessage()               {}
func (*GetCategoryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetCategoryReply) GetCategory() *CategoryInformation {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *GetCategoryReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetCategoryListRequest struct {
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,1,opt,name=shopId" json:"shopId,omitempty"`
	// 父分类 ID（0表示根）
	ParentCategoryId uint64 `protobuf:"varint,2,opt,name=parentCategoryId" json:"parentCategoryId,omitempty"`
}

func (m *GetCategoryListRequest) Reset()                    { *m = GetCategoryListRequest{} }
func (m *GetCategoryListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCategoryListRequest) ProtoMessage()               {}
func (*GetCategoryListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetCategoryListRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *GetCategoryListRequest) GetParentCategoryId() uint64 {
	if m != nil {
		return m.ParentCategoryId
	}
	return 0
}

type GetCategoryListReply struct {
	// 分类信息
	Category []*CategoryInformation `protobuf:"bytes,1,rep,name=category" json:"category,omitempty"`
	// 错误信息
	Err *Error `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *GetCategoryListReply) Reset()                    { *m = GetCategoryListReply{} }
func (m *GetCategoryListReply) String() string            { return proto.CompactTextString(m) }
func (*GetCategoryListReply) ProtoMessage()               {}
func (*GetCategoryListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetCategoryListReply) GetCategory() []*CategoryInformation {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *GetCategoryListReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type DeleteCategoryRequest struct {
	// 分类 ID
	CategoryId uint64 `protobuf:"varint,1,opt,name=categoryId" json:"categoryId,omitempty"`
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,2,opt,name=shopId" json:"shopId,omitempty"`
	// 更新人
	UpdatedBy uint64 `protobuf:"varint,3,opt,name=updatedBy" json:"updatedBy,omitempty"`
}

func (m *DeleteCategoryRequest) Reset()                    { *m = DeleteCategoryRequest{} }
func (m *DeleteCategoryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCategoryRequest) ProtoMessage()               {}
func (*DeleteCategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteCategoryRequest) GetCategoryId() uint64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *DeleteCategoryRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *DeleteCategoryRequest) GetUpdatedBy() uint64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

type DeleteCategoryReply struct {
	// 错误信息
	Err *Error `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *DeleteCategoryReply) Reset()                    { *m = DeleteCategoryReply{} }
func (m *DeleteCategoryReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteCategoryReply) ProtoMessage()               {}
func (*DeleteCategoryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteCategoryReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type CategoryInformation struct {
	// 分类 ID
	CategoryId uint64 `protobuf:"varint,1,opt,name=categoryId" json:"categoryId,omitempty"`
	// 店铺 ID
	ShopId uint64 `protobuf:"varint,2,opt,name=shopId" json:"shopId,omitempty"`
	// 父类目ID
	ParentId uint64 `protobuf:"varint,3,opt,name=parentId" json:"parentId,omitempty"`
	// 名称
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// 描述
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// 排序
	Sort int64 `protobuf:"varint,6,opt,name=sort" json:"sort,omitempty"`
	// 标记值
	Key string `protobuf:"bytes,7,opt,name=key" json:"key,omitempty"`
	// 层级
	Level uint64 `protobuf:"varint,8,opt,name=level" json:"level,omitempty"`
	// 结点路径，逗号分隔
	Path string `protobuf:"bytes,9,opt,name=path" json:"path,omitempty"`
	// 类目下非销售属性是否可自定义
	PropertyEditable bool `protobuf:"varint,10,opt,name=propertyEditable" json:"propertyEditable,omitempty"`
	// 类目下商品单位
	Unit string `protobuf:"bytes,11,opt,name=unit" json:"unit,omitempty"`
	// 分类状态： 1: 正常, 9: 删除
	Status uint64 `protobuf:"varint,12,opt,name=status" json:"status,omitempty"`
}

func (m *CategoryInformation) Reset()                    { *m = CategoryInformation{} }
func (m *CategoryInformation) String() string            { return proto.CompactTextString(m) }
func (*CategoryInformation) ProtoMessage()               {}
func (*CategoryInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CategoryInformation) GetCategoryId() uint64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *CategoryInformation) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *CategoryInformation) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *CategoryInformation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CategoryInformation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CategoryInformation) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *CategoryInformation) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CategoryInformation) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CategoryInformation) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CategoryInformation) GetPropertyEditable() bool {
	if m != nil {
		return m.PropertyEditable
	}
	return false
}

func (m *CategoryInformation) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *CategoryInformation) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateCategoryRequest)(nil), "goods.pkg.rpc.protos.CreateCategoryRequest")
	proto.RegisterType((*CreateCategoryReply)(nil), "goods.pkg.rpc.protos.CreateCategoryReply")
	proto.RegisterType((*UpdateCategoryRequest)(nil), "goods.pkg.rpc.protos.UpdateCategoryRequest")
	proto.RegisterType((*UpdateCategoryReply)(nil), "goods.pkg.rpc.protos.UpdateCategoryReply")
	proto.RegisterType((*GetCategoryRequest)(nil), "goods.pkg.rpc.protos.GetCategoryRequest")
	proto.RegisterType((*GetCategoryReply)(nil), "goods.pkg.rpc.protos.GetCategoryReply")
	proto.RegisterType((*GetCategoryListRequest)(nil), "goods.pkg.rpc.protos.GetCategoryListRequest")
	proto.RegisterType((*GetCategoryListReply)(nil), "goods.pkg.rpc.protos.GetCategoryListReply")
	proto.RegisterType((*DeleteCategoryRequest)(nil), "goods.pkg.rpc.protos.DeleteCategoryRequest")
	proto.RegisterType((*DeleteCategoryReply)(nil), "goods.pkg.rpc.protos.DeleteCategoryReply")
	proto.RegisterType((*CategoryInformation)(nil), "goods.pkg.rpc.protos.CategoryInformation")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Category service

type CategoryClient interface {
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryReply, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryReply, error)
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryReply, error)
	GetCategoryList(ctx context.Context, in *GetCategoryListRequest, opts ...grpc.CallOption) (*GetCategoryListReply, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryReply, error)
}

type categoryClient struct {
	cc *grpc.ClientConn
}

func NewCategoryClient(cc *grpc.ClientConn) CategoryClient {
	return &categoryClient{cc}
}

func (c *categoryClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryReply, error) {
	out := new(CreateCategoryReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.Category/CreateCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryReply, error) {
	out := new(UpdateCategoryReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.Category/UpdateCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryReply, error) {
	out := new(GetCategoryReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.Category/GetCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) GetCategoryList(ctx context.Context, in *GetCategoryListRequest, opts ...grpc.CallOption) (*GetCategoryListReply, error) {
	out := new(GetCategoryListReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.Category/GetCategoryList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryReply, error) {
	out := new(DeleteCategoryReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.Category/DeleteCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Category service

type CategoryServer interface {
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryReply, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryReply, error)
	GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryReply, error)
	GetCategoryList(context.Context, *GetCategoryListRequest) (*GetCategoryListReply, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryReply, error)
}

func RegisterCategoryServer(s *grpc.Server, srv CategoryServer) {
	s.RegisterService(&_Category_serviceDesc, srv)
}

func _Category_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.Category/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.Category/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.Category/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.Category/GetCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).GetCategoryList(ctx, req.(*GetCategoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.Category/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Category_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goods.pkg.rpc.protos.Category",
	HandlerType: (*CategoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _Category_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Category_UpdateCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _Category_GetCategory_Handler,
		},
		{
			MethodName: "GetCategoryList",
			Handler:    _Category_GetCategoryList_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Category_DeleteCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "category.proto",
}

func init() { proto.RegisterFile("category.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0x66, 0x28, 0x60, 0x39, 0x98, 0x95, 0x0c, 0xb0, 0x99, 0xa0, 0x31, 0xa4, 0x17, 0x86, 0x5d,
	0x95, 0x0b, 0x7c, 0x83, 0x65, 0x89, 0x21, 0xd9, 0xab, 0x26, 0xde, 0x18, 0x13, 0xd3, 0xa5, 0x23,
	0x8b, 0xdb, 0x76, 0xc6, 0xe9, 0x60, 0xd2, 0x37, 0x30, 0xd1, 0x87, 0xf0, 0x1d, 0xbc, 0xf0, 0x11,
	0x7c, 0x2d, 0x33, 0x33, 0xc0, 0xb6, 0x30, 0xcd, 0x12, 0x43, 0xdc, 0xab, 0x9e, 0x39, 0x73, 0x7e,
	0xbe, 0xf3, 0x65, 0xbe, 0x53, 0x38, 0x99, 0x07, 0x92, 0x2e, 0x98, 0xc8, 0x46, 0x5c, 0x30, 0xc9,
	0x70, 0x77, 0xc1, 0x58, 0x98, 0x8e, 0xf8, 0xed, 0x62, 0x24, 0xf8, 0xdc, 0x38, 0xd3, 0x3e, 0xd6,
	0xde, 0x8f, 0x73, 0x16, 0xc7, 0x2c, 0x31, 0x4e, 0xef, 0x17, 0x82, 0xde, 0x44, 0xd0, 0x40, 0xd2,
	0xc9, 0xba, 0x84, 0x4f, 0xbf, 0xac, 0x68, 0x2a, 0xf1, 0x29, 0x34, 0xd2, 0x1b, 0xc6, 0x67, 0x21,
	0x41, 0x03, 0x34, 0xac, 0xf9, 0xeb, 0x13, 0xee, 0x83, 0xcb, 0x03, 0x41, 0x13, 0x39, 0x0b, 0x49,
	0x55, 0xdf, 0x6c, 0xcf, 0x18, 0x43, 0x2d, 0x09, 0x62, 0x4a, 0x9c, 0x01, 0x1a, 0x36, 0x7d, 0x6d,
	0xe3, 0x01, 0xb4, 0x42, 0x9a, 0xce, 0xc5, 0x92, 0xcb, 0x25, 0x4b, 0x48, 0x4d, 0x5f, 0xe5, 0x5d,
	0x2a, 0x2b, 0x65, 0x42, 0x92, 0xfa, 0x00, 0x0d, 0x1d, 0x5f, 0xdb, 0xf8, 0x19, 0x34, 0xe7, 0x1a,
	0x56, 0x78, 0x91, 0x91, 0x86, 0x6e, 0x73, 0xe7, 0xf0, 0xbe, 0x23, 0xe8, 0xec, 0xa2, 0xe6, 0x51,
	0x86, 0xa7, 0xe0, 0x6e, 0x98, 0xd0, 0xa8, 0x5b, 0xe3, 0xb3, 0x91, 0x8d, 0x8a, 0xd1, 0x26, 0x6d,
	0x96, 0x7c, 0x62, 0x22, 0x0e, 0x14, 0x0c, 0x7f, 0x9b, 0x8a, 0x5f, 0x83, 0x43, 0x85, 0xd0, 0xd3,
	0xb5, 0xc6, 0x4f, 0xed, 0x15, 0xa6, 0x42, 0x30, 0xe1, 0xab, 0x38, 0xef, 0x37, 0x82, 0xde, 0x3b,
	0x1e, 0x5a, 0x38, 0x7c, 0x0e, 0xb0, 0x29, 0xba, 0xe5, 0x31, 0xe7, 0xc9, 0x71, 0x5c, 0x2d, 0x70,
	0x7c, 0x54, 0x1e, 0x57, 0x1a, 0x5a, 0x8e, 0xc7, 0xad, 0x43, 0xf3, 0xb8, 0x8b, 0xfc, 0xe1, 0x78,
	0xbc, 0x02, 0xfc, 0x96, 0xca, 0x23, 0x71, 0xe8, 0x7d, 0x43, 0xd0, 0x2e, 0x94, 0x7b, 0xb8, 0xc1,
	0x3e, 0xc0, 0x69, 0x0e, 0xc9, 0xd5, 0x32, 0x95, 0xf7, 0x89, 0xec, 0x1c, 0xda, 0x46, 0x54, 0x93,
	0xbb, 0xd1, 0xcd, 0x78, 0x7b, 0x7e, 0xef, 0x07, 0x82, 0xee, 0x5e, 0xf9, 0xfd, 0x61, 0x9d, 0xff,
	0x34, 0x6c, 0x0c, 0xbd, 0x4b, 0x1a, 0xd1, 0xe3, 0x89, 0xa1, 0xf0, 0x84, 0x9d, 0xdd, 0x27, 0x7c,
	0x09, 0x9d, 0xdd, 0x76, 0x6a, 0xf6, 0x35, 0x68, 0x74, 0x20, 0xe8, 0x3f, 0x55, 0xe8, 0x58, 0x58,
	0xf8, 0x67, 0xcc, 0xf9, 0x25, 0xe9, 0x94, 0x2c, 0xc9, 0x5a, 0xb9, 0xb8, 0xeb, 0xe5, 0xe2, 0x6e,
	0xe4, 0xc4, 0xdd, 0x06, 0xe7, 0x96, 0x66, 0xe4, 0x91, 0x8e, 0x56, 0x26, 0xee, 0x42, 0x3d, 0xa2,
	0x5f, 0x69, 0x44, 0x5c, 0xdd, 0xd4, 0x1c, 0x54, 0x2e, 0x0f, 0xe4, 0x0d, 0x69, 0x9a, 0x8e, 0xca,
	0xd6, 0x2f, 0x4c, 0x30, 0x4e, 0x85, 0xcc, 0xa6, 0xe1, 0x52, 0x06, 0xd7, 0x11, 0x25, 0x30, 0x40,
	0x43, 0xd7, 0xdf, 0xf3, 0xab, 0xfc, 0x55, 0xb2, 0x94, 0xa4, 0x65, 0xf2, 0x95, 0xad, 0x27, 0x97,
	0x81, 0x5c, 0xa5, 0xe4, 0xf1, 0x7a, 0x72, 0x7d, 0x1a, 0xff, 0xac, 0x81, 0xbb, 0x61, 0x12, 0x7f,
	0x86, 0x93, 0xe2, 0x9a, 0xc6, 0x2f, 0x4b, 0x5e, 0xa0, 0xed, 0x17, 0xd4, 0x3f, 0x3b, 0x2c, 0x98,
	0x47, 0x99, 0x57, 0x51, 0xbd, 0x8a, 0xab, 0xac, 0xac, 0x97, 0x75, 0x55, 0x97, 0xf5, 0xb2, 0x6c,
	0x47, 0xaf, 0x82, 0x03, 0x68, 0xe5, 0x14, 0x87, 0x87, 0xf6, 0xdc, 0xfd, 0x65, 0xd6, 0x7f, 0x71,
	0x40, 0xa4, 0x69, 0x11, 0xc3, 0x93, 0x1d, 0x51, 0xe3, 0x57, 0xf7, 0x26, 0xe7, 0x56, 0x4b, 0xff,
	0xfc, 0xc0, 0xe8, 0x2d, 0x7b, 0x45, 0x19, 0x95, 0xb1, 0x67, 0xd5, 0x76, 0x19, 0x7b, 0x16, 0x65,
	0x7a, 0x95, 0x0b, 0xf7, 0x7d, 0xc3, 0xdc, 0x5f, 0x9b, 0xef, 0x9b, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xf1, 0xd9, 0x13, 0xfb, 0xc0, 0x08, 0x00, 0x00,
}
