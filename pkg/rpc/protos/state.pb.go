// Code generated by protoc-gen-go. DO NOT EDIT.
// source: state.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PingRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *PingRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PingReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PingReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "goods.pkg.rpc.protos.PingRequest")
	proto.RegisterType((*PingReply)(nil), "goods.pkg.rpc.protos.PingReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StatusController service

type StatusControllerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
}

type statusControllerClient struct {
	cc *grpc.ClientConn
}

func NewStatusControllerClient(cc *grpc.ClientConn) StatusControllerClient {
	return &statusControllerClient{cc}
}

func (c *statusControllerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/goods.pkg.rpc.protos.StatusController/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StatusController service

type StatusControllerServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
}

func RegisterStatusControllerServer(s *grpc.Server, srv StatusControllerServer) {
	s.RegisterService(&_StatusController_serviceDesc, srv)
}

func _StatusController_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusControllerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.pkg.rpc.protos.StatusController/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusControllerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goods.pkg.rpc.protos.StatusController",
	HandlerType: (*StatusControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _StatusController_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "state.proto",
}

func init() { proto.RegisterFile("state.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2e, 0x49, 0x2c,
	0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x49, 0xcf, 0xcf, 0x4f, 0x29, 0xd6, 0x2b,
	0xc8, 0x4e, 0xd7, 0x2b, 0x2a, 0x48, 0x86, 0x08, 0x16, 0x2b, 0xa9, 0x73, 0x71, 0x07, 0x64, 0xe6,
	0xa5, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x49, 0x70, 0xb1, 0xe7, 0xa6, 0x16, 0x17,
	0x27, 0xa6, 0xa7, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x4a, 0xaa, 0x5c, 0x9c,
	0x10, 0x85, 0x05, 0x39, 0x95, 0xb8, 0x95, 0x19, 0x25, 0x70, 0x09, 0x04, 0x97, 0x24, 0x96, 0x94,
	0x16, 0x3b, 0xe7, 0xe7, 0x95, 0x14, 0xe5, 0xe7, 0xe4, 0xa4, 0x16, 0x09, 0xf9, 0x70, 0xb1, 0x80,
	0xb4, 0x0a, 0x29, 0xea, 0x61, 0x73, 0x82, 0x1e, 0x92, 0xfd, 0x52, 0xf2, 0xf8, 0x94, 0x14, 0xe4,
	0x54, 0x2a, 0x31, 0x38, 0x71, 0x44, 0xb1, 0x41, 0x44, 0x93, 0x20, 0xb4, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x59, 0x25, 0xb9, 0x9d, 0xe7, 0x00, 0x00, 0x00,
}
